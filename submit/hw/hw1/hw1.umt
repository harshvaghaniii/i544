                 H o m e w o r k   1  

*Due Date*: Feb 22, before midnight. .;
*Max Points*: 100

*Important Reminder*: As per the course
.<../../misc/academic-honesty/academic-honesty-policy.html>
"Academic Honesty Statement", cheating of any kind will minimally
result in your letter grade for the entire course being reduced by one
level.

To be turned in as a zip file using the *Homework 1* submission link
on gradescope.  When unpacked, the zip file *must* create a `hw1-sol`
directory such that:

  : `hw1-sol/hw1-sol.pdf` :
    This PDF file must contain the solution to the four questions
    specified in this document.  You can create this file using
    any software of your choice.

  : `hw1-sol/hw1-sol.ts` :
    This TypeScript file must contain runnable code for 12 functions.
    The provided .<hw1-sol> hw1-sol directory contains a
    .<hw1-sol/hw1-sol.ts?lang=ts> "skeleton starter file" which
    provides the specifications for the required functions.

    The submitted file must have all its conditional logging
    turned on so that running the file results in this linked .<LOG> LOG.
    Specifically, all the conditional logging should be turned on as
    in:

    .code(lang=ts)
    ~~~
    if (true) {
      logTests('...', [ 
      ...
      ]);
    }
    ~~~

    The `if`-condition *must* be .~true~.

*Justify all answers.*

*It may be the case that some questions cannot be answered as
 requested.*

Note that some of the questions require you to show code.  You may use
a JavaScript implementation to verify your answers.

You are encouraged to use the web or the library but are *required* to
cite any external sources used in your answers.

Many of the questions are meant to familiarize you with the built-in
functions available in JavaScript (and many other languages) for
arrays and strings. 

  # Normally, when maintaining an inventory of items we need to handle
    race conditions like:

      # There is a single item having a particular "stock-type".

      # Customer A orders a single item of "stock-type".  The system
        verifies that there is an item having "stock-type".
    
      # Customer B orders a single item of "stock-type".  The system
        verifies that there is an item having "stock-type".

      # The system completes the order for customer A.

      # The system completes the order for customer B.

    Because of the non-atomicity of the check for the presence of the
    item in the inventory and completion of the order, there is a race
    condition and the system will allow both customers A and B to
    double-purchase the single remaining "stock-unit" item.  This is
    usually handled by ensuring that the check and the action are
    wrapped in an atomic transaction, isolated from other concurrent
    transactions.

    The .<../../projects/prj1/prj1.html> "Project 1" lending library
    maintains an inventory of books, but we can get by without
    implementing atomic transactions.  Why?

    *Hint*: review the *Background* section in the project document.
    "8-points"

  # .<https://www.markdownguide.org/cheat-sheet/> Markdown headings
    begin with `#` characters, with the number of consecutive
    `#` characters indicating the level of the heading.

    Discuss how you would implement an algorithm that returns an
    object giving the outline of a Markdown document.  For example,
    given a document having the following headings:

    ```
    # Main Title
    ...
    ## Section 1
    ...
    ### SubSection 1.1
    ...
    ### SubSection 1.2
    ...
    #### SubSubSection 1.2.1
    ...
    ### SubSection 1.3
    ...
    ## Section 2
    ### SubSection 2.1
    ...
    ### SubSection 2.2
    ...
    ```
    your algorithm should return an object like:

    ~~~
    { title: 'Main Title',
      kids: [
        { title: 'Section 1', 
          kids: [
            { title: 'SubSection 1.1', kids: [], },
	    { title: 'SubSection 1.2',
	       kids: [ { title: 'SubSubSection 1.2.1', kids: [] } ],
	    },
            { title: 'SubSection 1.3', kids: [], },
          ],
	},
        { title: 'Section 2', 
          kids: [
            { title: 'SubSection 2.1', kids: [], },
            { title: 'SubSection 2.2', kids: [], },
	  ]
	},
      ],
    }
    ~~~

    *Hint*: use the crawler example from the
    .<../../slides/regex/regex.html> "Regular Expressions" slides as
    a guide. "10-points"

  # Given a function `f()` which returns a type `T`, where

    .code(lang=ts)
    ~~~
    type T = {
      a: number,
      b?: number,
      [key: string]: number,
    };
    ~~~

    Provide a *single* `const` declaration which declares variables `x`, `y` and
    `z` and initializes them to the result of calling `f()` as follows:

       + `x` should initialized to the `a` property of the returned object.

       + `y` should be initialized to the `b` property of the returned
         object.

       + `z` should be initialized to the `d` property of the returned
         object.

    If a specific property "prop" is missing in the returned value, then a
    default value can be looked up using `DEFAULTS`..``"prop". "5-points"

  # *Discuss* the validity of the following statements: "10-points"

      # It is possible that shifting a positive integer may result in
        a negative result.

      # It is possible that shifting a negative integer may result in
        a positive integer.

      # `for`-`of` can be used for iterating over objects.

      # `for`-`of` can be used for iterating over arrays.

      # Assuming that `m` and `str` have been declared suitably, the
        statement `while ((m = /a*b*/g.exec(str))) { ... }` has a bug.

  # You also need to implement the 12 functions specified in
    .<./hw1-sol/hw1-sol.ts?lang=ts> hw1-sol.ts subject to these
    .<restrictions.html> restrictions. Once fully implemented, running
    the file should result in this linked .<LOG> LOG.  You can get
    started by simply copying over the provided .<hw1-sol> hw1-sol
    directory to your `submit` folder (be sure to include your
    `hw1-sol.pdf` in that directory before zipping it up for
    submission).  "67-points"
